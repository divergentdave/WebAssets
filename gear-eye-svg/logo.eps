%!PS-Adobe-3.0 EPSF-3.0
%%Orientation: Portrait
%%BoundingBox: 0 0 700 400
%%Pages: 1
%%EndComments
%%BeginProlog

/gogreen
{
  0.262745 0.690196 0.388235 setrgbcolor
} bind def

/Circle
{
  /tempy exch def
  /tempx exch def
  gogreen
  newpath
  tempx tempy r 1.0 mul 0 360 arc%outside circle
  tempx tempy r 0.4 mul 360 0 arcn closepath fill %close off outside circle into annulus
  newpath
  tempx tempy r 0.25 mul 0 360 arc fill %inside circle
} def

/SplineX
{
  %assumes that the parameter (i.e. t) is on the top of the stack
  %replaces parameter with evaluation of cubic spline equation there
  dup 1 exch sub dup dup mul mul xcoords 0 get mul exch
  dup dup 1 exch sub dup 3 xcoords 1 get mul mul mul mul exch
  dup dup dup 1 exch sub 3 xcoords 2 get mul mul mul mul exch
  dup dup xcoords 3 get mul mul mul
  add add add
} def

/SplineY
{
  %assumes that the parameter (i.e. t) is on the top of the stack
  %replaces parameter with evaluation of cubic spline equation there
  dup 1 exch sub dup dup mul mul ycoords 0 get mul exch
  dup dup 1 exch sub dup 3 ycoords 1 get mul mul mul mul exch
  dup dup dup 1 exch sub 3 ycoords 2 get mul mul mul mul exch
  dup dup ycoords 3 get mul mul mul
  add add add
} def

/CircleLoop
{
  /lastx xcoords 0 get def %used to calculate arclength since last step
  /lasty ycoords 0 get def
  /xa 0 def %used to remember location of last circle for chain links
  /xb 0 def
  /ya 0 def
  /yb 0 def

  /arclength 0 def
  /goal 0 def %keep track of how far apart the circles are
  /r 9 def %radius of all circles (was 5 in testing)
  /goalstep 21 def %target distance between circles (was 11.5 in testing)
  /iterations 5000 def
  /linkangle 30 def
  /linkgap 1.1 def
  /fudgefactor 0.9 def %for making coincident arcs overlap

  0 1 iterations {
    iterations div dup %divide loop variable to get number from 0 to 1
    SplineX
    /thisx exch def
    SplineY
    /thisy exch def
    /deltax thisx lastx sub def
    /deltay thisy lasty sub def
    /arclength arclength deltax deltax mul deltay deltay mul add sqrt add def
    arclength goal ge {
      /goal goal goalstep add def
      xa xb eq ya yb eq and {%case for first circle
        %thisx thisy Circle %this makes the first one seem thicker...
        /xa thisx def
        /ya thisy def
      } {
        /xb xa def
        /yb ya def
        /xa thisx def
        /ya thisy def
        gsave
        xb yb translate
        0 0 Circle
        xb xa sub yb ya sub atan -1 mul rotate
        -90 rotate %i don't know why i need this, but it fixes something
        /d xa xb sub dup mul ya yb sub dup mul add sqrt 2 r mul sub def %distance between outside of the two circles
        /h 4 r r mul mul r d 2 div add dup mul sub sqrt def %how much further up the cutaway circle is
        /theta h r d 2 div add atan def %angle that marks the location of tangency between circles
        parity 0 eq {% link w/ tangent circles
          gogreen
          newpath
          0 0 r fudgefactor mul theta -1 mul theta arc %fudge factor in radius for rounding error
          r d 2 div add h r 180 theta add 360 theta sub arc
          r 2 mul d add 0 r fudgefactor mul 180 theta sub 180 theta add arc %ditto
          r d 2 div add h -1 mul r theta 180 theta sub arc
          fill
          /parity 1 def
        } { %link w/ gap
          gogreen
          newpath
          0 0 r linkgap mul linkangle -1 mul linkangle arc
          2 r mul d add 0 r linkgap mul 180 linkangle sub 180 linkangle add arc
          closepath
          fill
          /parity 0 def
        } ifelse
        grestore
      } ifelse
    } if
    /lastx thisx def
    /lasty thisy def
  } for
  xa ya Circle
} def

/ClipLoop
{
  /lastx xcoords 0 get def %used to calculate arclength since last step
  /lasty ycoords 0 get def
  /xa 0 def %used to remember location of last circle for chain links
  /xb 0 def
  /ya 0 def
  /yb 0 def

  /arclength 0 def
  /goal 0 def %keep track of how far apart the circles are
  /r 9 def %radius of all circles (was 5 in testing)
  /goalstep 21 def %target distance between circles (was 11.5 in testing)
  /iterations 5000 def
  /linkangle 30 def
  /linkgap 1.1 def
  /i 0 def

  0 1 iterations {
    iterations div dup %divide loop variable to get number from 0 to 1
    SplineX
    /thisx exch def
    SplineY
    /thisy exch def
    /deltax thisx lastx sub def
    /deltay thisy lasty sub def
    /arclength arclength deltax deltax mul deltay deltay mul add sqrt add def
    arclength goal ge {
      /goal goal goalstep add def
      xa xb eq ya yb eq and {
        /xa thisx def
        /ya thisy def
      } {
        /xb xa def
        /yb ya def
        /xa thisx def
        /ya thisy def
        i 2 ge {
          %gsave %this eats paths
          matrix currentmatrix %just save the matrix
          xb yb translate
          xb xa sub yb ya sub atan -1 mul rotate
          -90 rotate %i don't know why i need this, but it fixes something
          /d xa xb sub dup mul ya yb sub dup mul add sqrt 2 r mul sub def %distance between outside of the two circles
          /h 4 r r mul mul r d 2 div add dup mul sub sqrt def %how much further up the cutaway circle is
          /theta h r d 2 div add atan def %angle that marks the location of tangency between circles
          %0 0 11 180 theta add 360 theta sub arc
          %r d 2 div add h -1 mul 7 180 theta sub theta arcn
          0 0 11 270 360 theta sub arc %actually this causes a small amount of overlap which in turn flattens off the bottom
          r d 2 div add h -1 mul 7 180 theta sub theta arcn %there doesn't seem to be a very good way to fix this that doesn't involve caching the last angle and me tearing my hair out
          2 r mul d add 0 11 180 theta add 270 arc
          %grestore %death to path eaters
          setmatrix %restore saved matrix
        } if
        /i i 1 add def
      } ifelse
    } if
    /lastx thisx def
    /lasty thisy def
  } for
} def

/Eye
{
  /parity 0 def %switches to indicate which link thingy to draw
  /xcoords xcurvea def
  /ycoords ycurvea def
  CircleLoop

  gsave
  newpath
  /xcoords xcurvea def
  /ycoords ycurvea def
  ClipLoop
  etc1 {} forall lineto
  etc2 {} forall lineto
  etc3 {} forall lineto
  closepath
  2 2 add 5 eq {%debug stuff
    0.1 setlinewidth
    0 setgray
    stroke
  } {
    clip
    gogreen

    /parity 1 def
    /xcoords xcurveb def
    /ycoords ycurveb def
    CircleLoop

    newpath
    30 30 360 {
      dup
      centerx exch centery exch 55 exch dup 10  add exch 25 add arc
      centerx exch centery exch 70 exch dup 25 add exch 40 add arc
    } for
    closepath
    fill

    gsave
    newpath
    centerx centery 40 0 360 arc
    clip

    centerx centery translate
    jaunty rotate %draw our gradient off at a jaunty angle

    /diameter 80 def
    /gradientres 160 def
    1 1 gradientres {
      gradientres div
      /i exch def
      1 1 0.262745 sub 1 i sub mul sub 1 1 0.690196 sub 1 i sub mul sub 1 1 0.388235 sub 1 i sub mul sub setrgbcolor
      diameter gradientres div setlinewidth
      newpath
      -0.5 diameter mul i diameter mul diameter 2 div sub moveto
      0.5 diameter mul i diameter mul diameter 2 div sub lineto
      stroke
    } for

    grestore

    gogreen
    newpath
    centerx centery 10 0 360 arc
    fill
  } ifelse
  grestore
} def

%%EndProlog
%%Page: 1 1

%gogreen
%newpath
%/Helvetica-Bold findfont 48 scalefont setfont
%8 44 moveto
%(The Green Machine) show

gsave

%move origin to upper left corner
0 400 translate
1 -1 scale

%put new text here!
/pointdata [
[[14 305] [49 305] [43 311] [32 311] [32 356] [26 356] [26 311] [8 311]]
[[55 305] [61 308] [61 328] [84 328] [84 305] [90 308] [90 356] [84 356] [84 334] [61 334] [61 356] [55 356]]
[[98 305] [132 305] [126 311] [104 311] [104 328] [129 328] [123 334] [104 334] [104 350] [132 350] [126 356] [98 356]]
[[162 305] [193 305] [187 311] [161 311] [161 350] [187 350] [187 334] [170 334] [176 328] [193 328] [193 350] [187 356] [162 356] [155 349] [155 312]]
[[201 305] [233 305] [239 311] [239 326] [234 330] [239 334] [239 356] [233 356] [233 334] [207 334] [207 328] [233 328] [233 311] [207 311] [207 356] [201 356]]
[[246 305] [280 305] [274 311] [252 311] [252 328] [277 328] [271 334] [252 334] [252 350] [280 350] [274 356] [246 356]]
[[283 305] [317 305] [311 311] [289 311] [289 328] [314 328] [308 334] [289 334] [289 350] [317 350] [311 356] [283 356]]
[[324 308] [331 305] [356 344] [356 308] [362 305] [362 356] [357 356] [332 317] [330 317] [330 356] [324 356]]
[[391 310] [397 306] [415 341] [416 341] [434 305] [441 309] [441 356] [435 356] [435 317] [419 349] [413 349] [397 316] [397 356] [391 356]]
[[452 312] [459 305] [484 305] [490 311] [490 356] [484 356] [490 311] [490 356] [484 356] [484 337] [458 337] [458 331] [484 331] [484 311] [458 311] [458 356] [452 356]]
[[496 311] [502 305] [527 305] [533 311] [502 311] [502 350] [534 350] [528 356] [502 356] [496 350]]
[[540 305] [546 308] [546 328] [569 328] [569 305] [575 308] [575 356] [569 356] [569 334] [546 334] [546 356] [540 356]]
[[588 305] [594 305] [594 356] [588 356]]
[[606 308] [613 305] [638 344] [638 308] [644 305] [644 356] [639 356] [614 317] [612 317] [612 356] [606 356]]
[[651 305] [685 305] [679 311] [657 311] [657 328] [682 328] [676 334] [657 334] [657 350] [685 350] [679 356] [651 356]]
] def
gogreen
pointdata {
  %an array of points is on the stack, representing one letter
  newpath
  /toggle 0 def
  {
    %a point is on the stack, that is, an array of two numbers
    {} forall
    toggle 0 eq {
      /toggle 1 def
      moveto
    } {
      lineto
    } ifelse
  } forall
  closepath
  fill
} forall

/xcurvea [271 223 107 22] def %these were redrawn in The GIMP and exported
/ycurvea [168 89 32 98] def
/xcurveb [271 164 12 56] def
/ycurveb [168 322 214 90] def
/etc1 [20 300] def %additional points for clipping shape
/etc2 [300 300] def
/etc3 [300 168] def
/centerx 158 def
/centery 145 def
/jaunty -30 def

Eye

/jaunty 30 def

gsave
700 0 translate
-1 1 scale

Eye

grestore

grestore

%%EOF
